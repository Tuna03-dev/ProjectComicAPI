@model List<DotNetTruyen.Models.Notification>

@{
    ViewData["Title"] = "Notifications";
    Layout = "~/Views/Shared/_DashBoardLayout.cshtml";
}

<div class="container-custome mt-4">
    <div class="card shadow-sm border-0">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="fs-4 fw-bold">
                    Notifications
                    @if (ViewBag.UnreadCount > 0)
                    {
                        <span class="badge bg-danger text-white ms-2 rounded-pill">@ViewBag.UnreadCount tin mới</span>
                    }
                </h2>
                <div>
                    <form asp-action="MarkAllAsRead" method="post" class="d-inline">
                        <button type="submit" class="btn btn-dark btn-sm text-white me-3">
                            <i class="fas fa-check me-1"></i> Đánh dấu là đã đọc
                        </button>
                    </form>
                    <form asp-action="ClearAll" method="post" class="d-inline clear-all-form">
                        <button type="submit" class="btn btn-danger btn-sm text-white">
                            <i class="fas fa-trash me-1"></i> Xóa tất cả
                        </button>
                    </form>
                </div>
            </div>

            <div class="mb-4">
                <ul class="nav nav-tabs nav-tabs-custom">
                    <li class="nav-item">
                        <a class="nav-link active" href="#" data-tab="all">Tất cả</a>
                    </li>
                    @if (Model.Any(n => !n.IsRead))
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="#" data-tab="unread">Chưa đọc</a>
                        </li>
                    }
                </ul>
            </div>

            @if (!Model.Any())
            {
                <div class="alert alert-info">No notifications available.</div>
            }
            else
            {
                <div id="notification-list">
                    @foreach (var group in Model.GroupBy(n => n.CreatedAt.Value.Date).OrderByDescending(g => g.Key))
                    {
                        string dateLabel = group.Key == DateTime.Today ? "Hôm nay" :
                        group.Key == DateTime.Today.AddDays(-1) ? "Hôm qua" :
                        group.Key.ToString("MMM d, yyyy");

                        <div class="mb-4 notification-group" data-is-read="@group.All(n => n.IsRead)">
                            <h6 class="text-muted fw-bold mb-3">@dateLabel</h6>
                            @foreach (var notification in group)
                            {
                                <div class="card mb-3 shadow-sm border-0 notification-item" data-is-read="@notification.IsRead.ToString().ToLower()" data-id="@notification.Id">
                                    <div class="card-body p-3 d-flex justify-content-between align-items-start">
                                        <div class="d-flex align-items-start">
                                            <div class="me-3">
                                                @if (notification.Type == "success")
                                                {
                                                    <i class="fas fa-check-circle text-success fs-5"></i>
                                                }
                                                else if (notification.Type == "warning")
                                                {
                                                    <i class="fas fa-exclamation-circle text-danger fs-5"></i>
                                                }
                                                else if (notification.Type == "info")
                                                {
                                                    <i class="fas fa-info-circle text-info fs-5"></i>
                                                }
                                            </div>
                                            <div>
                                                <h6 class="mb-1 fw-bold">@notification.Title</h6>
                                                <p class="text-muted mb-2">@notification.Message</p>
                                                <small>
                                                    <a href="@notification.Link" class="text-primary text-decoration-none me-2 mark-as-read-link">
                                                        @(notification.Type == "warning" ? "Xem chi tiết" : "Xem chi tiết")
                                                    </a>
                                                    <a href="#" class="text-muted text-decoration-none dismiss-notification" data-id="@notification.Id">Xóa</a>
                                                </small>
                                            </div>
                                        </div>
                                        <small class="text-muted time-ago" data-timestamp="@notification.CreatedAt.Value.ToString("o")">
                                            <!-- Thời gian sẽ được cập nhật bằng JavaScript -->
                                        </small>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
                <div class="d-flex justify-content-end mt-3">
                    <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1 })" class="btn btn-outline-secondary btn-sm @(ViewBag.CurrentPage == 1 ? "disabled" : "")">Trước</a>
                    <span class="badge bg-light text-dark border mx-3 px-3 py-2">Trang @ViewBag.CurrentPage / @ViewBag.TotalPages</span>
                    <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1 })" class="btn btn-outline-secondary btn-sm ms-2 @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">Sau</a>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Hàm tính thời gian tương đối
        function timeAgo(dateString) {
            const now = new Date();
            const past = new Date(dateString);
            const diffInSeconds = Math.floor((now - past) / 1000);

            if (diffInSeconds < 60) {
                return `${diffInSeconds} giây trước`;
            }

            const diffInMinutes = Math.floor(diffInSeconds / 60);
            if (diffInMinutes < 60) {
                return `${diffInMinutes} phút trước`;
            }

            const diffInHours = Math.floor(diffInMinutes / 60);
            if (diffInHours < 24) {
                return `${diffInHours} giờ trước`;
            }

            const diffInDays = Math.floor(diffInHours / 24);
            if (diffInDays < 7) {
                return `${diffInDays} ngày trước`;
            }

            // Nếu hơn 7 ngày, hiển thị định dạng ngày cụ thể
            return past.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: true
            });
        }

        // Cập nhật thời gian cho tất cả các phần tử .time-ago
        function updateTimeAgo() {
            document.querySelectorAll('.time-ago').forEach(element => {
                const timestamp = element.getAttribute('data-timestamp');
                element.textContent = timeAgo(timestamp);
            });
        }

        // Gọi hàm cập nhật thời gian khi trang tải
        updateTimeAgo();

        // Xử lý chuyển tab
        document.querySelectorAll('.nav-tabs-custom .nav-link').forEach(tab => {
            tab.addEventListener('click', function (e) {
                e.preventDefault();

                // Xóa class active khỏi tất cả các tab
                document.querySelectorAll('.nav-tabs-custom .nav-link').forEach(t => t.classList.remove('active'));
                // Thêm class active cho tab được bấm
                this.classList.add('active');

                const tabType = this.getAttribute('data-tab');
                const notificationGroups = document.querySelectorAll('.notification-group');
                const notificationItems = document.querySelectorAll('.notification-item');

                if (tabType === 'all') {
                    // Hiển thị tất cả thông báo
                    notificationGroups.forEach(group => {
                        group.style.display = 'block';
                    });
                    notificationItems.forEach(item => {
                        item.style.display = 'block';
                    });
                } else if (tabType === 'unread') {
                    // Chỉ hiển thị thông báo chưa đọc
                    notificationItems.forEach(item => {
                        const isRead = item.getAttribute('data-is-read') === 'true';
                        item.style.display = isRead ? 'none' : 'block';
                    });

                    // Ẩn nhóm nếu không có thông báo nào hiển thị
                    notificationGroups.forEach(group => {
                        const visibleItems = group.querySelectorAll('.notification-item:not([style*="display: none"])');
                        group.style.display = visibleItems.length > 0 ? 'block' : 'none';
                    });
                }

                // Lưu trạng thái tab vào localStorage
                localStorage.setItem('activeTab', tabType);
            });
        });

        // Khôi phục trạng thái tab khi trang tải lại
        document.addEventListener('DOMContentLoaded', function () {
            const activeTab = localStorage.getItem('activeTab') || 'all';
            const tabElement = document.querySelector(`.nav-tabs-custom .nav-link[data-tab="${activeTab}"]`);
            if (tabElement) {
                tabElement.click();
            }
        });

        // Xử lý sự kiện Clear All với SweetAlert2
        document.querySelector('.clear-all-form').addEventListener('submit', function (e) {
            e.preventDefault();
            Swal.fire({
                title: 'Bạn có chắc chắn không?',
                text: 'Bạn có muốn xóa tất cả thông báo không? Hành động này không thể hoàn tác!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) {
                    this.submit(); // Gửi form nếu người dùng xác nhận
                }
            });
        });

        // Xử lý sự kiện Dismiss với SweetAlert2
        document.querySelectorAll('.dismiss-notification').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                Swal.fire({
                    title: 'Bạn có chắc chắn không?',
                    text: 'Bạn có muốn xóa thông báo này không?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Xóa',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const notificationId = this.getAttribute('data-id');
                        fetch('/ManageNotifications/Dismiss/' + notificationId, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest',
                                'Content-Type': 'application/json',
                                'Accept': 'application/json'
                            }
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    const card = this.closest('.card');
                                    const group = card.closest('.notification-group');
                                    card.remove();

                                    // Kiểm tra nếu nhóm không còn thông báo nào thì ẩn nhóm
                                    const remainingItems = group.querySelectorAll('.notification-item:not([style*="display: none"])');
                                    if (remainingItems.length === 0) {
                                        group.style.display = 'none';
                                    }

                                    Swal.fire(
                                        'Đã xóa!',
                                        'Thông báo đã được xóa thành công.',
                                        'success'
                                    );

                                    // Cập nhật tab "Chưa đọc" nếu không còn thông báo chưa đọc
                                    const unreadItems = document.querySelectorAll('.notification-item[data-is-read="false"]');
                                    if (unreadItems.length === 0) {
                                        const unreadTab = document.querySelector('.nav-tabs-custom .nav-link[data-tab="unread"]');
                                        if (unreadTab) {
                                            unreadTab.parentElement.style.display = 'none';
                                        }
                                    }
                                } else {
                                    Swal.fire(
                                        'Lỗi!',
                                        'Không thể xóa thông báo. Vui lòng thử lại.',
                                        'error'
                                    );
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire(
                                    'Lỗi!',
                                    'Đã xảy ra lỗi khi xóa thông báo.',
                                    'error'
                                );
                            });
                    }
                });
            });
        });

        // Xử lý sự kiện bấm "Xem chi tiết" để đánh dấu là đã đọc
        document.querySelectorAll('.mark-as-read-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault(); // Ngăn chặn chuyển hướng ngay lập tức

                const notificationItem = this.closest('.notification-item');
                const notificationId = notificationItem.getAttribute('data-id');
                const isRead = notificationItem.getAttribute('data-is-read') === 'true';

                // Nếu thông báo đã được đọc, không cần gửi yêu cầu AJAX
                if (isRead) {
                    window.location.href = this.getAttribute('href'); // Chuyển hướng đến liên kết
                    return;
                }

                // Gửi yêu cầu AJAX để đánh dấu là đã đọc
                fetch('/ManageNotifications/MarkAsRead', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ id: notificationId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Cập nhật giao diện: đánh dấu thông báo là đã đọc
                            notificationItem.setAttribute('data-is-read', 'true');

                            // Cập nhật số lượng thông báo chưa đọc
                            const unreadCountElement = document.querySelector('.badge.bg-danger');
                            if (unreadCountElement) {
                                let unreadCount = parseInt(unreadCountElement.textContent) || 0;
                                unreadCount = Math.max(0, unreadCount - 1);
                                if (unreadCount > 0) {
                                    unreadCountElement.textContent = `${unreadCount} tin mới`;
                                } else {
                                    unreadCountElement.style.display = 'none';
                                }
                            }

                            // Cập nhật trạng thái nhóm (nếu tất cả thông báo trong nhóm đã đọc)
                            const group = notificationItem.closest('.notification-group');
                            const groupItems = group.querySelectorAll('.notification-item');
                            const allRead = Array.from(groupItems).every(item => item.getAttribute('data-is-read') === 'true');
                            group.setAttribute('data-is-read', allRead);

                            // Cập nhật tab "Chưa đọc" nếu không còn thông báo chưa đọc
                            const unreadItems = document.querySelectorAll('.notification-item[data-is-read="false"]');
                            if (unreadItems.length === 0) {
                                const unreadTab = document.querySelector('.nav-tabs-custom .nav-link[data-tab="unread"]');
                                if (unreadTab) {
                                    unreadTab.parentElement.style.display = 'none';
                                }
                            }

                            // Cập nhật hiển thị tab hiện tại
                            const activeTab = document.querySelector('.nav-tabs-custom .nav-link.active');
                            if (activeTab) {
                                activeTab.click();
                            }

                            // Chuyển hướng đến liên kết sau khi đánh dấu là đã đọc
                            window.location.href = this.getAttribute('href');
                        } else {
                            Swal.fire(
                                'Lỗi!',
                                data.message || 'Không thể đánh dấu thông báo là đã đọc. Vui lòng thử lại.',
                                'error'
                            );
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire(
                            'Lỗi!',
                            'Đã xảy ra lỗi khi đánh dấu thông báo là đã đọc.',
                            'error'
                        );
                    });
            });
        });
    </script>
}

@section Styles {
    <style>
        /* Tùy chỉnh giao diện */
        .container-custome {
            max-width: 800px;
            margin: 0 auto;
        }

        h2 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .badge {
            font-size: 0.75rem;
            padding: 0.35em 0.65em;
        }

        .nav-tabs-custom {
            border-bottom: 1px solid #dee2e6;
        }

            .nav-tabs-custom .nav-link {
                color: #6c757d;
                font-size: 0.9rem;
                padding: 0.5rem 1rem;
                border: none;
                border-bottom: 2px solid transparent;
            }

                .nav-tabs-custom .nav-link.active {
                    color: #007bff;
                    border-bottom: 2px solid #007bff;
                }

                .nav-tabs-custom .nav-link:hover {
                    color: #007bff;
                    border-bottom: 2px solid #007bff;
                }

        h6 {
            font-size: 0.9rem;
            font-weight: 600;
        }

        .card {
            border: none;
            border-radius: 8px;
            background: #f8f9fa;
        }

        .card-body {
            padding: 1rem;
        }

            .card-body h6 {
                font-size: 1rem;
                font-weight: 600;
            }

            .card-body p {
                font-size: 0.9rem;
                margin-bottom: 0.5rem;
            }

            .card-body small {
                font-size: 0.8rem;
            }

        .text-primary {
            color: #007bff !important;
        }

        .text-muted {
            color: #6c757d !important;
        }

        .btn-outline-primary {
            border-radius: 5px;
            font-size: 0.9rem;
            padding: 0.375rem 1rem;
        }
    </style>
}