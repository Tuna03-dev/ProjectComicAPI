@model List<DotNetTruyen.Models.Notification>
@using DotNetTruyen.ViewModels
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@{
    ViewData["Title"] = "Notifications";
    var user = await UserManager.GetUserAsync(User);
}

<body class="page-template-default page page-id-7 logged-in wp-embed-responsive header-style-1 sticky-enabled sticky-style-1 text-ui-light minimal-reading-layout">
    <div class="wrap">
        <div class="body-wrap">
            <partial name="_HeaderPartial" />
            <div class="site-content">
                <div class="c-page-content style-2">
                    <div class="content-area">
                        <div class="container">
                            <div class="row">
                                <div class="col-md-12 col-sm-12">
                                    <div class="main-col-inner">
                                        <div id="post-7" class="c-blog-post post-7 page type-page status-publish hentry">
                                            <div class="entry-header">
                                                <div class="entry-header_wrap">
                                                    <div class="entry-title">
                                                        <h1 class="item-title h2">Thông báo</h1>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="entry-content">
                                                <div class="entry-content_wrap">
                                                    <div class="row settings-page">
                                                        <partial name="_UserSettingPartial" />
                                                        <div class="col-md-9 col-sm-9">
                                                            <div class="tabs-content-wrap">
                                                                <div class="tab-content">
                                                                    <div class="tab-pane active">
                                                                        <div class="notifications-container">
                                                                            <div class="notification-header d-flex justify-content-between align-items-center mb-4">
                                                                                <h2 class="fs-4 fw-bold text-white">
                                                                                    Thông báo
                                                                                    @if (ViewBag.UnreadCount > 0)
                                                                                    {
                                                                                        <span class="badge bg-warning text-dark ms-2 rounded-pill">@ViewBag.UnreadCount tin mới</span>
                                                                                    }
                                                                                </h2>
                                                                                <div>
                                                                                    <form asp-action="MarkAllAsRead" method="post" class="d-inline">
                                                                                        <button type="submit" class="btn btn-dark btn-sm text-white me-3">
                                                                                            <i class="fas fa-check me-1"></i> Đánh dấu là đã đọc
                                                                                        </button>
                                                                                    </form>
                                                                                    <form asp-action="ClearAll" method="post" class="d-inline clear-all-form">
                                                                                        <button type="submit" class="btn btn-warning btn-sm text-dark">
                                                                                            <i class="fas fa-trash me-1"></i> Xóa tất cả
                                                                                        </button>
                                                                                    </form>
                                                                                </div>
                                                                            </div>

                                                                            <div class="mb-4">
                                                                                <ul class="nav nav-tabs nav-tabs-custom">
                                                                                    <li class="nav-item">
                                                                                        <a class="nav-link active" href="#" data-tab="all">Tất cả</a>
                                                                                    </li>
                                                                                    @if (Model.Any(n => !n.IsRead))
                                                                                    {
                                                                                        <li class="nav-item">
                                                                                            <a class="nav-link" href="#" data-tab="unread">Chưa đọc</a>
                                                                                        </li>
                                                                                    }
                                                                                </ul>
                                                                            </div>

                                                                            @if (!Model.Any())
                                                                            {
                                                                                <div class="alert alert-dark text-white">Không có thông báo nào.</div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div id="notification-list">
                                                                                    @foreach (var group in Model.GroupBy(n => n.CreatedAt.Value.Date).OrderByDescending(g => g.Key))
                                                                                    {
                                                                                        string dateLabel = group.Key == DateTime.Today ? "Hôm nay" :
                                                                                        group.Key == DateTime.Today.AddDays(-1) ? "Hôm qua" :
                                                                                        group.Key.ToString("MMM d, yyyy");

                                                                                        <div class="mb-4 notification-group" data-is-read="@group.All(n => n.IsRead)">
                                                                                            <h6 class="text-muted fw-bold mb-3">@dateLabel</h6>
                                                                                            @foreach (var notification in group)
                                                                                            {
                                                                                                <div class="card mb-3 notification-item" data-is-read="@notification.IsRead.ToString().ToLower()" data-id="@notification.Id">
                                                                                                    <div class="card-body p-3 d-flex justify-content-between align-items-start">
                                                                                                        <div class="d-flex align-items-start">
                                                                                                            <div class="me-3">
                                                                                                                @if (notification.Type == "success")
                                                                                                                {
                                                                                                                    <i class="fas fa-check-circle text-success fs-5"></i>
                                                                                                                }
                                                                                                                else if (notification.Type == "warning")
                                                                                                                {
                                                                                                                    <i class="fas fa-exclamation-circle text-warning fs-5"></i>
                                                                                                                }
                                                                                                                else if (notification.Type == "info")
                                                                                                                {
                                                                                                                    <i class="fas fa-info-circle text-light fs-5"></i>
                                                                                                                }
                                                                                                            </div>
                                                                                                            <div>
                                                                                                                <h6 class="mb-1 fw-bold text-white">@notification.Title</h6>
                                                                                                                <p class="text-muted mb-2">@notification.Message</p>
                                                                                                                <small>
                                                                                                                    <a href="@notification.Link" class="text-warning text-decoration-none me-2 mark-as-read-link">
                                                                                                                        @(notification.Type == "warning" ? "Xem chi tiết" : "Xem chi tiết")
                                                                                                                    </a>
                                                                                                                    <a href="#" class="text-muted text-decoration-none dismiss-notification" data-id="@notification.Id">Xóa</a>
                                                                                                                </small>
                                                                                                            </div>
                                                                                                        </div>
                                                                                                        <small class="text-muted time-ago" data-timestamp="@notification.CreatedAt.Value.ToString("o")">
                                                                                                        </small>
                                                                                                    </div>
                                                                                                </div>
                                                                                            }
                                                                                        </div>
                                                                                    }
                                                                                </div>
                                                                                <div class="d-flex justify-content-end mt-3">
                                                                                    <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1 })" class="btn btn-outline-secondary btn-sm @(ViewBag.CurrentPage == 1 ? "disabled" : "")">Trước</a>
                                                                                    <span class="badge bg-dark text-white border mx-3 px-3 py-2">Trang @ViewBag.CurrentPage / @ViewBag.TotalPages</span>
                                                                                    <a href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1 })" class="btn btn-outline-secondary btn-sm ms-2 @(ViewBag.CurrentPage == ViewBag.TotalPages ? "disabled" : "")">Sau</a>
                                                                                </div>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

@section Scripts {
    <script src="~/lib/sweetalert2/sweetalert2@11.js"></script>
    <script>
        function timeAgo(dateString) {
            const now = new Date();
            const past = new Date(dateString);
            const diffInSeconds = Math.floor((now - past) / 1000);

            if (diffInSeconds < 60) return `${diffInSeconds} giây trước`;
            const diffInMinutes = Math.floor(diffInSeconds / 60);
            if (diffInMinutes < 60) return `${diffInMinutes} phút trước`;
            const diffInHours = Math.floor(diffInMinutes / 60);
            if (diffInHours < 24) return `${diffInHours} giờ trước`;
            const diffInDays = Math.floor(diffInHours / 24);
            if (diffInDays < 7) return `${diffInDays} ngày trước`;
            return past.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true });
        }

        function updateTimeAgo() {
            document.querySelectorAll('.time-ago').forEach(element => {
                const timestamp = element.getAttribute('data-timestamp');
                element.textContent = timeAgo(timestamp);
            });
        }

        updateTimeAgo();

        document.querySelectorAll('.nav-tabs-custom .nav-link').forEach(tab => {
            tab.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelectorAll('.nav-tabs-custom .nav-link').forEach(t => t.classList.remove('active'));
                this.classList.add('active');

                const tabType = this.getAttribute('data-tab');
                const notificationGroups = document.querySelectorAll('.notification-group');
                const notificationItems = document.querySelectorAll('.notification-item');

                if (tabType === 'all') {
                    notificationGroups.forEach(group => group.style.display = 'block');
                    notificationItems.forEach(item => item.style.display = 'block');
                } else if (tabType === 'unread') {
                    notificationItems.forEach(item => {
                        const isRead = item.getAttribute('data-is-read') === 'true';
                        item.style.display = isRead ? 'none' : 'block';
                    });
                    notificationGroups.forEach(group => {
                        const visibleItems = group.querySelectorAll('.notification-item:not([style*="display: none"])');
                        group.style.display = visibleItems.length > 0 ? 'block' : 'none';
                    });
                }

                localStorage.setItem('activeTab', tabType);
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            const activeTab = localStorage.getItem('activeTab') || 'all';
            const tabElement = document.querySelector(`.nav-tabs-custom .nav-link[data-tab="${activeTab}"]`);
            if (tabElement) tabElement.click();
        });

        document.querySelector('.clear-all-form').addEventListener('submit', function (e) {
            e.preventDefault();
            Swal.fire({
                title: 'Bạn có chắc chắn không?',
                text: 'Bạn có muốn xóa tất cả thông báo không? Hành động này không thể hoàn tác!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#ff8c00',
                cancelButtonColor: '#555',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                if (result.isConfirmed) this.submit();
            });
        });

        document.querySelectorAll('.dismiss-notification').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                Swal.fire({
                    title: 'Bạn có chắc chắn không?',
                    text: 'Bạn có muốn xóa thông báo này không?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#ff8c00',
                    cancelButtonColor: '#555',
                    confirmButtonText: 'Xóa',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        const notificationId = this.getAttribute('data-id');
                        fetch('/UserNotification/Dismiss/' + notificationId, {
                            method: 'POST',
                            headers: { 'X-Requested-With': 'XMLHttpRequest', 'Content-Type': 'application/json', 'Accept': 'application/json' }
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    const card = this.closest('.card');
                                    const group = card.closest('.notification-group');
                                    card.remove();
                                    const remainingItems = group.querySelectorAll('.notification-item:not([style*="display: none"])');
                                    if (remainingItems.length === 0) group.style.display = 'none';
                                    Swal.fire('Đã xóa!', 'Thông báo đã được xóa thành công.', 'success');
                                    const unreadItems = document.querySelectorAll('.notification-item[data-is-read="false"]');
                                    if (unreadItems.length === 0) {
                                        const unreadTab = document.querySelector('.nav-tabs-custom .nav-link[data-tab="unread"]');
                                        if (unreadTab) unreadTab.parentElement.style.display = 'none';
                                    }
                                } else {
                                    Swal.fire('Lỗi!', 'Không thể xóa thông báo. Vui lòng thử lại.', 'error');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire('Lỗi!', 'Đã xảy ra lỗi khi xóa thông báo.', 'error');
                            });
                    }
                });
            });
        });

        document.querySelectorAll('.mark-as-read-link').forEach(link => {
            link.addEventListener('click', function (e) {
                e.preventDefault();
                const notificationItem = this.closest('.notification-item');
                const notificationId = notificationItem.getAttribute('data-id');
                const linkUrl = this.getAttribute('href');

                // Gọi API MarkAsRead trước khi chuyển hướng
                fetch('/UserNotification/MarkAsRead', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ id: notificationId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Cập nhật giao diện ngay lập tức
                            notificationItem.setAttribute('data-is-read', 'true');
                            const unreadCountElement = document.querySelector('.badge.bg-warning');
                            if (unreadCountElement) {
                                let unreadCount = parseInt(unreadCountElement.textContent) || 0;
                                unreadCount = Math.max(0, unreadCount - 1);
                                if (unreadCount > 0) unreadCountElement.textContent = `${unreadCount} tin mới`;
                                else unreadCountElement.style.display = 'none';
                            }
                            const group = notificationItem.closest('.notification-group');
                            const groupItems = group.querySelectorAll('.notification-item');
                            const allRead = Array.from(groupItems).every(item => item.getAttribute('data-is-read') === 'true');
                            group.setAttribute('data-is-read', allRead);
                            const unreadItems = document.querySelectorAll('.notification-item[data-is-read="false"]');
                            if (unreadItems.length === 0) {
                                const unreadTab = document.querySelector('.nav-tabs-custom .nav-link[data-tab="unread"]');
                                if (unreadTab) unreadTab.parentElement.style.display = 'none';
                            }
                            const activeTab = document.querySelector('.nav-tabs-custom .nav-link.active');
                            if (activeTab) activeTab.click();

                            // Chuyển hướng sau khi đánh dấu thành công
                            window.location.href = linkUrl;
                        } else {
                            Swal.fire('Lỗi!', data.message || 'Không thể đánh dấu thông báo là đã đọc. Vui lòng thử lại.', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire('Lỗi!', 'Đã xảy ra lỗi khi đánh dấu thông báo là đã đọc.', 'error');
                    });
            });
        });
    </script>
}

@section Styles {
    <style>
        body {
            background-color: #1a1a1a;
            color: #e0e0e0;
        }

        .notifications-container {
            max-width: 900px;
            margin: 0 auto;
        }

        .notification-header h2 {
            font-size: 1.75rem;
            font-weight: 600;
            color: #ffffff;
        }

        .badge.bg-warning {
            background-color: #ff8c00 !important;
            font-size: 0.8rem;
            color: #1a1a1a !important;
        }

        .btn-dark {
            background-color: #333;
            border-color: #444;
        }

            .btn-dark:hover {
                background-color: #444;
                border-color: #555;
            }

        .btn-warning {
            background-color: #ff8c00;
            border-color: #e07b00;
            color: #1a1a1a;
        }

            .btn-warning:hover {
                background-color: #e07b00;
                border-color: #cc6d00;
                color: #1a1a1a;
            }

        .nav-tabs-custom {
            border-bottom: 1px solid #444;
        }

            .nav-tabs-custom .nav-link {
                color: #b0b0b0;
                font-size: 0.95rem;
                padding: 0.5rem 1rem;
                border: none;
                border-bottom: 2px solid transparent;
                transition: all 0.3s ease;
            }

                .nav-tabs-custom .nav-link.active {
                    color: #ff8c00;
                    border-bottom: 2px solid #ff8c00;
                }

                .nav-tabs-custom .nav-link:hover {
                    color: #ff8c00;
                    border-bottom: 2px solid #ff8c00;
                }

        .notification-group h6 {
            font-size: 0.95rem;
            font-weight: 600;
            color: #888;
        }

        .card {
            background-color: #252525;
            border: 1px solid #333;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

            .card:hover {
                border-color: #ff8c00;
                box-shadow: 0 0 10px rgba(255, 140, 0, 0.2);
            }

        .card-body {
            padding: 1rem;
        }

            .card-body h6 {
                font-size: 1rem;
                font-weight: 600;
                color: #ffffff;
            }

            .card-body p {
                font-size: 0.9rem;
                color: #b0b0b0;
                margin-bottom: 0.5rem;
            }

            .card-body small {
                font-size: 0.85rem;
            }

        .text-warning {
            color: #ff8c00 !important;
        }

        .text-muted {
            color: #888 !important;
        }

        .btn-outline-secondary {
            border-color: #444;
            color: #e0e0e0;
        }

            .btn-outline-secondary:hover {
                background-color: #333;
                border-color: #555;
                color: #ffffff;
            }

            .btn-outline-secondary.disabled {
                color: #666;
                border-color: #333;
            }

        .badge.bg-dark {
            background-color: #333 !important;
            color: #e0e0e0;
            border: 1px solid #444;
        }

        .alert-dark {
            background-color: #222;
            border-color: #333;
            color: #e0e0e0;
        }

        .nav-tabs-wrap .nav-tabs li a {
            color: #b0b0b0;
            transition: all 0.3s ease;
        }

        .nav-tabs-wrap .nav-tabs li.active a {
            color: #ff8c00;
            border-bottom: 2px solid #ff8c00;
        }

        .nav-tabs-wrap .nav-tabs li a:hover {
            color: #ff8c00;
        }
    </style>
}